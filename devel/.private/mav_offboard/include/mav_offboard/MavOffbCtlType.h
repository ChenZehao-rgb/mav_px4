// Generated by gencpp from file mav_offboard/MavOffbCtlType.msg
// DO NOT EDIT!


#ifndef MAV_OFFBOARD_MESSAGE_MAVOFFBCTLTYPE_H
#define MAV_OFFBOARD_MESSAGE_MAVOFFBCTLTYPE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mav_offboard
{
template <class ContainerAllocator>
struct MavOffbCtlType_
{
  typedef MavOffbCtlType_<ContainerAllocator> Type;

  MavOffbCtlType_()
    : mav_offb_ctl_type(0)  {
    }
  MavOffbCtlType_(const ContainerAllocator& _alloc)
    : mav_offb_ctl_type(0)  {
  (void)_alloc;
    }



   typedef uint8_t _mav_offb_ctl_type_type;
  _mav_offb_ctl_type_type mav_offb_ctl_type;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(OFFBOARD_IGNORE)
  #undef OFFBOARD_IGNORE
#endif
#if defined(_WIN32) && defined(GOTO_SETPOINT_STEP)
  #undef GOTO_SETPOINT_STEP
#endif
#if defined(_WIN32) && defined(GOTO_SETPOINT_SMOOTH)
  #undef GOTO_SETPOINT_SMOOTH
#endif
#if defined(_WIN32) && defined(GOTO_SETPOINTS_STEP)
  #undef GOTO_SETPOINTS_STEP
#endif
#if defined(_WIN32) && defined(GOTO_SETPOINTS_SMOOTH)
  #undef GOTO_SETPOINTS_SMOOTH
#endif
#if defined(_WIN32) && defined(POS_CTRL_BY_ATT)
  #undef POS_CTRL_BY_ATT
#endif
#if defined(_WIN32) && defined(POS_CTRL_BY_BODY_RATE)
  #undef POS_CTRL_BY_BODY_RATE
#endif

  enum {
    OFFBOARD_IGNORE = 0u,
    GOTO_SETPOINT_STEP = 1u,
    GOTO_SETPOINT_SMOOTH = 2u,
    GOTO_SETPOINTS_STEP = 3u,
    GOTO_SETPOINTS_SMOOTH = 4u,
    POS_CTRL_BY_ATT = 5u,
    POS_CTRL_BY_BODY_RATE = 6u,
  };


  typedef boost::shared_ptr< ::mav_offboard::MavOffbCtlType_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mav_offboard::MavOffbCtlType_<ContainerAllocator> const> ConstPtr;

}; // struct MavOffbCtlType_

typedef ::mav_offboard::MavOffbCtlType_<std::allocator<void> > MavOffbCtlType;

typedef boost::shared_ptr< ::mav_offboard::MavOffbCtlType > MavOffbCtlTypePtr;
typedef boost::shared_ptr< ::mav_offboard::MavOffbCtlType const> MavOffbCtlTypeConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mav_offboard::MavOffbCtlType_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mav_offboard::MavOffbCtlType_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mav_offboard::MavOffbCtlType_<ContainerAllocator1> & lhs, const ::mav_offboard::MavOffbCtlType_<ContainerAllocator2> & rhs)
{
  return lhs.mav_offb_ctl_type == rhs.mav_offb_ctl_type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mav_offboard::MavOffbCtlType_<ContainerAllocator1> & lhs, const ::mav_offboard::MavOffbCtlType_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mav_offboard

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mav_offboard::MavOffbCtlType_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mav_offboard::MavOffbCtlType_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mav_offboard::MavOffbCtlType_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mav_offboard::MavOffbCtlType_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mav_offboard::MavOffbCtlType_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mav_offboard::MavOffbCtlType_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mav_offboard::MavOffbCtlType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ecfa29034218f9eaa269cda4f3eba64a";
  }

  static const char* value(const ::mav_offboard::MavOffbCtlType_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xecfa29034218f9eaULL;
  static const uint64_t static_value2 = 0xa269cda4f3eba64aULL;
};

template<class ContainerAllocator>
struct DataType< ::mav_offboard::MavOffbCtlType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mav_offboard/MavOffbCtlType";
  }

  static const char* value(const ::mav_offboard::MavOffbCtlType_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mav_offboard::MavOffbCtlType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"# mav offb control type for diff tasks\n"
"uint8 mav_offb_ctl_type\n"
"\n"
"uint8 OFFBOARD_IGNORE = 0\n"
"\n"
"uint8 GOTO_SETPOINT_STEP = 1\n"
"uint8 GOTO_SETPOINT_SMOOTH = 2\n"
"\n"
"uint8 GOTO_SETPOINTS_STEP = 3\n"
"uint8 GOTO_SETPOINTS_SMOOTH = 4\n"
"\n"
"uint8 POS_CTRL_BY_ATT = 5\n"
"\n"
"uint8 POS_CTRL_BY_BODY_RATE = 6\n"
;
  }

  static const char* value(const ::mav_offboard::MavOffbCtlType_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mav_offboard::MavOffbCtlType_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mav_offb_ctl_type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MavOffbCtlType_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mav_offboard::MavOffbCtlType_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mav_offboard::MavOffbCtlType_<ContainerAllocator>& v)
  {
    s << indent << "mav_offb_ctl_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mav_offb_ctl_type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAV_OFFBOARD_MESSAGE_MAVOFFBCTLTYPE_H
