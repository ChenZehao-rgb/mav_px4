// Generated by gencpp from file mav_offboard/SetMavOffbCtlTypeRequest.msg
// DO NOT EDIT!


#ifndef MAV_OFFBOARD_MESSAGE_SETMAVOFFBCTLTYPEREQUEST_H
#define MAV_OFFBOARD_MESSAGE_SETMAVOFFBCTLTYPEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mav_offboard/MavOffbCtlType.h>

namespace mav_offboard
{
template <class ContainerAllocator>
struct SetMavOffbCtlTypeRequest_
{
  typedef SetMavOffbCtlTypeRequest_<ContainerAllocator> Type;

  SetMavOffbCtlTypeRequest_()
    : ctlType()  {
    }
  SetMavOffbCtlTypeRequest_(const ContainerAllocator& _alloc)
    : ctlType(_alloc)  {
  (void)_alloc;
    }



   typedef  ::mav_offboard::MavOffbCtlType_<ContainerAllocator>  _ctlType_type;
  _ctlType_type ctlType;





  typedef boost::shared_ptr< ::mav_offboard::SetMavOffbCtlTypeRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mav_offboard::SetMavOffbCtlTypeRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetMavOffbCtlTypeRequest_

typedef ::mav_offboard::SetMavOffbCtlTypeRequest_<std::allocator<void> > SetMavOffbCtlTypeRequest;

typedef boost::shared_ptr< ::mav_offboard::SetMavOffbCtlTypeRequest > SetMavOffbCtlTypeRequestPtr;
typedef boost::shared_ptr< ::mav_offboard::SetMavOffbCtlTypeRequest const> SetMavOffbCtlTypeRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mav_offboard::SetMavOffbCtlTypeRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mav_offboard::SetMavOffbCtlTypeRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mav_offboard::SetMavOffbCtlTypeRequest_<ContainerAllocator1> & lhs, const ::mav_offboard::SetMavOffbCtlTypeRequest_<ContainerAllocator2> & rhs)
{
  return lhs.ctlType == rhs.ctlType;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mav_offboard::SetMavOffbCtlTypeRequest_<ContainerAllocator1> & lhs, const ::mav_offboard::SetMavOffbCtlTypeRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mav_offboard

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mav_offboard::SetMavOffbCtlTypeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mav_offboard::SetMavOffbCtlTypeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mav_offboard::SetMavOffbCtlTypeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mav_offboard::SetMavOffbCtlTypeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mav_offboard::SetMavOffbCtlTypeRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mav_offboard::SetMavOffbCtlTypeRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mav_offboard::SetMavOffbCtlTypeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6a64ef2cd96ddeb8b1cc79308e3fe0dd";
  }

  static const char* value(const ::mav_offboard::SetMavOffbCtlTypeRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6a64ef2cd96ddeb8ULL;
  static const uint64_t static_value2 = 0xb1cc79308e3fe0ddULL;
};

template<class ContainerAllocator>
struct DataType< ::mav_offboard::SetMavOffbCtlTypeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mav_offboard/SetMavOffbCtlTypeRequest";
  }

  static const char* value(const ::mav_offboard::SetMavOffbCtlTypeRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mav_offboard::SetMavOffbCtlTypeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mav_offboard/MavOffbCtlType ctlType\n"
"\n"
"================================================================================\n"
"MSG: mav_offboard/MavOffbCtlType\n"
"\n"
"# mav offb control type for diff tasks\n"
"uint8 mav_offb_ctl_type\n"
"\n"
"uint8 OFFBOARD_IGNORE = 0\n"
"\n"
"uint8 GOTO_SETPOINT_STEP = 1\n"
"uint8 GOTO_SETPOINT_SMOOTH = 2\n"
"\n"
"uint8 GOTO_SETPOINTS_STEP = 3\n"
"uint8 GOTO_SETPOINTS_SMOOTH = 4\n"
"\n"
"uint8 POS_CTRL_BY_ATT = 5\n"
"\n"
"uint8 POS_CTRL_BY_BODY_RATE = 6\n"
;
  }

  static const char* value(const ::mav_offboard::SetMavOffbCtlTypeRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mav_offboard::SetMavOffbCtlTypeRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ctlType);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetMavOffbCtlTypeRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mav_offboard::SetMavOffbCtlTypeRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mav_offboard::SetMavOffbCtlTypeRequest_<ContainerAllocator>& v)
  {
    s << indent << "ctlType: ";
    s << std::endl;
    Printer< ::mav_offboard::MavOffbCtlType_<ContainerAllocator> >::stream(s, indent + "  ", v.ctlType);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAV_OFFBOARD_MESSAGE_SETMAVOFFBCTLTYPEREQUEST_H
